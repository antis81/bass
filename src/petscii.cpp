
#include "petscii.h"

#include <array>
#include <coreutils/log.h>

// clang-format off
static std::array petsciiTableUp = {
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
	0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,

	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
	0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
//40
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
	0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
//50
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
	0x0058, 0x0059, 0x005A, 0x005B, 0x00A3, 0x005D, 0x2191, 0x2190,
//60
	0x1fb79, 0x2660, 0x1fb72, 0x1fb78, 0x1fb77, 0x1fb76, 0x1fb7a, 0x1fb71,
	0x1fb74, 0x256e, 0x2570, 0x256f, 0x1fb7c, 0x2572, 0x2571, 0x1fb7d,
//70
	0x1fb7e, 0x25cf, 0x1fb7b, 0x2665, 0x1fb70, 0x256d, 0x2573, 0x25cb,
	0x2663, 0x1fb75, 0x2666, 0x253c, 0x1fb8c, 0x2502, 0x03c0, 0x25e5,
//80
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000A, 0x0000, 0x0000,
//90
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
//A0
	0x00A0, 0x258C, 0x2584, 0x2594, 0x2581, 0x258F, 0x2592, 0x2595,
	0x1fb8f, 0x25e4, 0x1fb87, 0x251C, 0x0000, 0x2514, 0x2510, 0x2582,
//B0
	0x250C, 0x2534, 0x252C, 0x2524, 0x258E, 0x258D, 0x1fb88, 0x1fb82,
	0x1fb83, 0x2583, 0x1FB7F, 0x2596, 0x259D, 0x2518, 0x2598, 0x259a,
//C0
	0x1fb79, 0x2660, 0x1fb72, 0x1fb78, 0x1fb77, 0x1fb76, 0x1fb7a, 0x1fb71,
	0x1fb74, 0x256e, 0x2570, 0x256f, 0x1fb7c, 0x2572, 0x2571, 0x1fb7d,
//D0
	0x1fb7e, 0x25cf, 0x1fb7b, 0x2665, 0x1fb70, 0x256d, 0x2573, 0x25cb,
	0x2663, 0x1fb75, 0x2666, 0x253c, 0x1fb8c, 0x2502, 0x03c0, 0x25e5,
//E0
	0x00A0, 0x258C, 0x2584, 0x2594, 0x2581, 0x258F, 0x2592, 0x2595,
	0x1fb8f, 0x25e4, 0x1fb87, 0x251C, 0x2f97, 0x2514, 0x2510, 0x2582,
//F0
	0x250C, 0x2534, 0x252C, 0x2524, 0x258E, 0x258D, 0x1fb88, 0x1fb82,
	0x1fb83, 0x2583, 0x1FB7F, 0x2596, 0x259D, 0x2518, 0x2598, 0x03c0
};
// clang-format on

// clang-format off
static std::array petsciiTableLo = {
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
	0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,

	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
	0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
//40
	0x0040, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
	0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
//50
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
	0x0078, 0x0079, 0x007A, 0x005B, 0x00A3, 0x005D, 0x2191, 0x2190,
//60
	0x1fb79, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
	0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
//70
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
	0x0058, 0x0059, 0x005A, 0x253c, 0x1fb8c, 0x2502, 0x1fb96, 0x1fb98,
//80
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000A, 0x0000, 0x0000,
//90
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
//A0
	0x00A0, 0x258C, 0x2584, 0x2594, 0x2581, 0x258F, 0x2592, 0x2595,
	0x0000, 0x25A8, 0x0000, 0x251C, 0x0000, 0x2514, 0x2510, 0x2582,
//B0
	0x250C, 0x2534, 0x252C, 0x2524, 0x258E, 0x258D, 0x1fb88, 0x1fb82,
	0x1fb83, 0x2583, 0x2713, 0x2596, 0x259D, 0x2518, 0x2598, 0x259a,
//C0
	0x1fb79, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
	0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
//D0
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
	0x0058, 0x0059, 0x005A, 0x253C, 0x0000, 0x2502, 0x1fb96, 0x1fb98,
//E0
	0x00A0, 0x258C, 0x2584, 0x2594, 0x2581, 0x258F, 0x2592, 0x2595,
	0x1fb8f, 0x1fb99, 0x1fb87, 0x251C, 0x2f97, 0x2514, 0x2510, 0x2582,
//F0
	0x250C, 0x2534, 0x252C, 0x2524, 0x258E, 0x258D, 0x1fb88, 0x1fb82,
	0x1fb83, 0x2583, 0x2713, 0x2596, 0x259D, 0x2518, 0x2598, 0x1fb96
};
// clang-format on

int32_t pet2uni_lo(uint8_t p)
{
    return petsciiTableLo[p - 0x20];
}

int32_t pet2uni_up(uint8_t p)
{
    return petsciiTableUp[p - 0x20];
}

uint8_t sc2pet(uint8_t p)
{
    p &= 0x7f;
    static const std::array offsets = {64, 0, 32, 64};
    int offs = offsets[p >> 5];
    return p + offs;
}

uint8_t pet2sc(uint8_t p)
{
    static const std::array offsets = {128, 0, -64, -32, 64, -64, -128, -128};
    int offs = offsets[p >> 5];
    return p + offs;
}

int32_t sc2uni_lo(uint8_t sc)
{
    return petsciiTableLo[sc2pet(sc) - 0x20];
}

int32_t sc2uni_up(uint8_t sc)
{
    return petsciiTableUp[sc2pet(sc) - 0x20];
}

